/*============================================================================
  
  SL_OpenGL.h
  
  by Stefan Schaal, Feb. 1999
  ==============================================================================
  Remarks:
  
  Header file for SL_OpenGL.c and related programs
  
  ============================================================================*/

#ifndef _SL_openGL_
#define _SL_openGL_

#include "sys/time.h"
#include "unistd.h"

/* defines */
#define LEFT_MENU   1
#define MIDDLE_MENU 2
#define RIGHT_MENU  3

/* basic window settings */
#define EYEX0       0.7
#define EYEY0       2.0
#define EYEZ0       0.3
#define CENTERX0    0.0
#define CENTERY0    0.0
#define CENTERZ0    0.0
#define UPX0        0.0
#define UPY0        0.0
#define UPZ0        1.0

/* structure to create and maintain openGL windows */
typedef struct OpenGLWindow {
  int    openGLId;         /* unique integer assigned by OpenGL 
			      to window */
  char  *wptr;             /* window pointer, assigned by the 
			      OS-specific operating system */
  int    x;                /* x position of window */
  int    y;                /* y position of window */
  int    height;           /* height of window */
  int    width;            /* width of window */
  char   name[100];        /* name of window */
  int    hide;             /* hide window or not */
  int    draw_axis;        /* TRUE/FALSE */
  int    follow_basis;     /* TRUE/FALSE */
  double fovea;            /* fovea angle in degrees */
  /* view variables for the window based on gluLookAt */
  GLdouble eye[N_CART+1];
  GLdouble center[N_CART+1];
  GLdouble up[N_CART+1];
  /* default view variables for the window needed to reset the view */
  GLdouble eye0[N_CART+1];
  GLdouble center0[N_CART+1];
  GLdouble up0[N_CART+1];
  /* glut function associated with the window */
  void   (*idle)();
  void   (*display)();
  void   (*keyboard)(unsigned char, int, int);
  void   (*reshape)();
  void   (*special)();
  void   (*menu)();
  /* pointer to next window */
  char   *next_wptr;       
  
} OpenGLWindow, *OpenGLWPtr;

/* possible object types */
#define CUBE    1
#define SPHERE  2

/* possible contact models */
#define DAMPED_SPRING_STATIC_FRICTION    1
#define DAMPED_SPRING_VISCOUS_FRICTION   2

/* structure to create objects in the environment */
typedef struct Object {
  char    name[20];                      /* object name */
  int     type;                          /* object type */
  int     contact_model;                 /* which contact model to be used */
  double  trans[N_CART+1];               /* translatory offset of object */
  double  rot[N_CART+1];                 /* rotational offset of object */
  double  scale[N_CART+1];               /* scaling in x,y,z */
  double  rgb[N_CART+1];                 /* color information */
  double  *contact_parms;                /* contact parameters */
  double  *object_parms;                 /* object parameters */
  char   *nptr;                          /* pointer to next object */
} Object, *ObjectPtr;


/* structure to deal with contact forces */
typedef struct Contact {
  int        active;                           /* TRUE/FALSE: indicates whether this
						  point should be checked for contacts */
  int        status;                           /* contact is true or false */
  int        friction_flag;                    /* flag for switching between different friction models */
  ObjectPtr  optr;                             /* ptr of object that is contacted */
  int        base_dof;                         /* to which DOF does this point
						  connect? */
  int        off_link;                         /* which link should be used for
						  moment arm */
  double     x[N_CART+1];                      /* point of contact in object 
						  coordintates */
  double     x_last[N_CART+1];                 /* previous contact point */
  double     x_start[N_CART+1];                /* point of first contact */
  double     normal[N_CART+1];                 /* normal displacement vector */
  double     normvel[N_CART+1];                /* normal velocity vector */
  double     tangent[N_CART+1];                /* tangential displacement vector */
  double     tanvel[N_CART+1];                 /* tangential velocity vector */
  double     viscvel[N_CART+1];                /* velocity vector for viscous friction */
  double     f[N_CART+1];                      /* contact forces in world coordinates */

						  
} Contact, *ContactPtr;

#ifdef __cplusplus
extern "C" {
#endif

/* global functions */
int        initGraphics(int* argc, char*** argv);
int        initSimulation(int argc, char** argv);
int        createWindow(OpenGLWindow *wptr);
OpenGLWPtr getOpenGLWindow(void);
void       addCommand(char *name, void (*fptr)(void));
void       addMenuItem(char *name, void (*fptr)(void), int mID);
void       checkKeyboard(void);
ObjectPtr  addSphere(char *name, double *rgb, double *pos, double *rot, 
		     double *scale, int contact,
		     double *parms, int n_faces);
ObjectPtr  addCube(char *name, double *rgb, double *pos, double *rot, 
		   double *scale, int contact,
		   double *parms);
void       drawObjects(void);
void       checkContacts(double);
void       drawContacts(double);
int        changeObjPosByName(char *name, double *pos, double *rot);
void       changeObjPosByPtr(ObjectPtr ptr, double *pos, double *rot);
int        deleteObjByName(char *name);
void       readObjects(void);
ObjectPtr  getObjPtrByName(char *name);
void       glutPostRedisplayAll(void);
OpenGLWPtr whichGLWindow(void);
void       toggleHideWindow(OpenGLWPtr ptr);
void       updateAllWindows(void);
void       changeWindowUpdateRate(double rate);
void       hideWindowByName(char *name, int hide);
void       reset(void);
void       mrdplotUpdateState(void);


/* exported variables */
extern int solid;
extern ObjectPtr objs;
extern ContactPtr contacts;
extern int PAUSE;
extern double window_update_rate;
extern SL_uext *ucontact;
extern int real_time;
extern int mrdplot_mode;

#ifdef __cplusplus
}
#endif


#endif  /* _SL_openGL_ */
